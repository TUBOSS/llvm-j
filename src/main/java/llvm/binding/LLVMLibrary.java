package llvm.binding;
import java.util.Collections;
import java.util.Iterator;

import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ValuedEnum;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>LLVM</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("LLVM-3.0") 
@Runtime(CRuntime.class) 
public class LLVMLibrary {
	
	static {
		BridJ.register();
	}
	
	
	public enum LLVMByteOrdering implements IntValuedEnum<LLVMByteOrdering > {
		LLVMBigEndian(0),
		LLVMLittleEndian(1);
		LLVMByteOrdering(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMByteOrdering > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMByteOrdering > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};

	public enum llvm_lto_status_t implements IntValuedEnum<llvm_lto_status_t > {
		LLVM_LTO_UNKNOWN(0),
		LLVM_LTO_OPT_SUCCESS(1),
		LLVM_LTO_READ_SUCCESS(2),
		LLVM_LTO_READ_FAILURE(3),
		LLVM_LTO_WRITE_FAILURE(4),
		LLVM_LTO_NO_TARGET(5),
		LLVM_LTO_NO_WORK(6),
		LLVM_LTO_MODULE_MERGE_FAILURE(7),
		LLVM_LTO_ASM_FAILURE(8),
		LLVM_LTO_NULL_OBJECT(9);
		llvm_lto_status_t(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<llvm_lto_status_t > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<llvm_lto_status_t > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum LLVMAttribute implements IntValuedEnum<LLVMAttribute > {
		LLVMZExtAttribute(1 << 0),
		LLVMSExtAttribute(1 << 1),
		LLVMNoReturnAttribute(1 << 2),
		LLVMInRegAttribute(1 << 3),
		LLVMStructRetAttribute(1 << 4),
		LLVMNoUnwindAttribute(1 << 5),
		LLVMNoAliasAttribute(1 << 6),
		LLVMByValAttribute(1 << 7),
		LLVMNestAttribute(1 << 8),
		LLVMReadNoneAttribute(1 << 9),
		LLVMReadOnlyAttribute(1 << 10),
		LLVMNoInlineAttribute(1 << 11),
		LLVMAlwaysInlineAttribute(1 << 12),
		LLVMOptimizeForSizeAttribute(1 << 13),
		LLVMStackProtectAttribute(1 << 14),
		LLVMStackProtectReqAttribute(1 << 15),
		LLVMAlignment(31 << 16),
		LLVMNoCaptureAttribute(1 << 21),
		LLVMNoRedZoneAttribute(1 << 22),
		LLVMNoImplicitFloatAttribute(1 << 23),
		LLVMNakedAttribute(1 << 24),
		LLVMInlineHintAttribute(1 << 25),
		LLVMStackAlignment(7 << 26);
		LLVMAttribute(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMAttribute > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMAttribute > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum LLVMOpcode implements IntValuedEnum<LLVMOpcode > {
		LLVMRet(1),
		LLVMBr(2),
		LLVMSwitch(3),
		LLVMIndirectBr(4),
		LLVMInvoke(5),
		LLVMUnwind(6),
		LLVMUnreachable(7),
		LLVMAdd(8),
		LLVMFAdd(9),
		LLVMSub(10),
		LLVMFSub(11),
		LLVMMul(12),
		LLVMFMul(13),
		LLVMUDiv(14),
		LLVMSDiv(15),
		LLVMFDiv(16),
		LLVMURem(17),
		LLVMSRem(18),
		LLVMFRem(19),
		LLVMShl(20),
		LLVMLShr(21),
		LLVMAShr(22),
		LLVMAnd(23),
		LLVMOr(24),
		LLVMXor(25),
		LLVMAlloca(26),
		LLVMLoad(27),
		LLVMStore(28),
		LLVMGetElementPtr(29),
		LLVMTrunc(30),
		LLVMZExt(31),
		LLVMSExt(32),
		LLVMFPToUI(33),
		LLVMFPToSI(34),
		LLVMUIToFP(35),
		LLVMSIToFP(36),
		LLVMFPTrunc(37),
		LLVMFPExt(38),
		LLVMPtrToInt(39),
		LLVMIntToPtr(40),
		LLVMBitCast(41),
		LLVMICmp(42),
		LLVMFCmp(43),
		LLVMPHI(44),
		LLVMCall(45),
		LLVMSelect(46),
		LLVMVAArg(49),
		LLVMExtractElement(50),
		LLVMInsertElement(51),
		LLVMShuffleVector(52),
		LLVMExtractValue(53),
		LLVMInsertValue(54);
		LLVMOpcode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMOpcode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMOpcode > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum LLVMTypeKind implements IntValuedEnum<LLVMTypeKind > {
		LLVMVoidTypeKind(0),
		LLVMFloatTypeKind(1),
		LLVMDoubleTypeKind(2),
		LLVMX86_FP80TypeKind(3),
		LLVMFP128TypeKind(4),
		LLVMPPC_FP128TypeKind(5),
		LLVMLabelTypeKind(6),
		LLVMIntegerTypeKind(7),
		LLVMFunctionTypeKind(8),
		LLVMStructTypeKind(9),
		LLVMArrayTypeKind(10),
		LLVMPointerTypeKind(11),
		LLVMOpaqueTypeKind(12),
		LLVMVectorTypeKind(13),
		LLVMMetadataTypeKind(14),
		LLVMX86_MMXTypeKind(15);
		LLVMTypeKind(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMTypeKind > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMTypeKind > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum LLVMLinkage implements IntValuedEnum<LLVMLinkage > {
		LLVMExternalLinkage(0),
		LLVMAvailableExternallyLinkage(1),
		LLVMLinkOnceAnyLinkage(2),
		LLVMLinkOnceODRLinkage(3),
		LLVMWeakAnyLinkage(4),
		LLVMWeakODRLinkage(5),
		LLVMAppendingLinkage(6),
		LLVMInternalLinkage(7),
		LLVMPrivateLinkage(8),
		LLVMDLLImportLinkage(9),
		LLVMDLLExportLinkage(10),
		LLVMExternalWeakLinkage(11),
		LLVMGhostLinkage(12),
		LLVMCommonLinkage(13),
		LLVMLinkerPrivateLinkage(14),
		LLVMLinkerPrivateWeakLinkage(15),
		LLVMLinkerPrivateWeakDefAutoLinkage(16);
		LLVMLinkage(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMLinkage > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMLinkage > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum LLVMVisibility implements IntValuedEnum<LLVMVisibility > {
		LLVMDefaultVisibility(0),
		LLVMHiddenVisibility(1),
		LLVMProtectedVisibility(2);
		LLVMVisibility(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMVisibility > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMVisibility > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum LLVMCallConv implements IntValuedEnum<LLVMCallConv > {
		LLVMCCallConv(0),
		LLVMFastCallConv(8),
		LLVMColdCallConv(9),
		LLVMX86StdcallCallConv(64),
		LLVMX86FastcallCallConv(65);
		LLVMCallConv(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMCallConv > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMCallConv > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum LLVMIntPredicate implements IntValuedEnum<LLVMIntPredicate > {
		LLVMIntEQ(32),
		LLVMIntNE(33),
		LLVMIntUGT(34),
		LLVMIntUGE(35),
		LLVMIntULT(36),
		LLVMIntULE(37),
		LLVMIntSGT(38),
		LLVMIntSGE(39),
		LLVMIntSLT(40),
		LLVMIntSLE(41);
		LLVMIntPredicate(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMIntPredicate > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMIntPredicate > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum LLVMRealPredicate implements IntValuedEnum<LLVMRealPredicate > {
		LLVMRealPredicateFalse(0),
		LLVMRealOEQ(1),
		LLVMRealOGT(2),
		LLVMRealOGE(3),
		LLVMRealOLT(4),
		LLVMRealOLE(5),
		LLVMRealONE(6),
		LLVMRealORD(7),
		LLVMRealUNO(8),
		LLVMRealUEQ(9),
		LLVMRealUGT(10),
		LLVMRealUGE(11),
		LLVMRealULT(12),
		LLVMRealULE(13),
		LLVMRealUNE(14),
		LLVMRealPredicateTrue(15);
		LLVMRealPredicate(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMRealPredicate > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMRealPredicate > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum lto_symbol_attributes implements IntValuedEnum<lto_symbol_attributes > {
		LTO_SYMBOL_ALIGNMENT_MASK(0x1F),
		LTO_SYMBOL_PERMISSIONS_MASK(0xE0),
		LTO_SYMBOL_PERMISSIONS_CODE(0xA0),
		LTO_SYMBOL_PERMISSIONS_DATA(0xC0),
		LTO_SYMBOL_PERMISSIONS_RODATA(0x80),
		LTO_SYMBOL_DEFINITION_MASK(0x700),
		LTO_SYMBOL_DEFINITION_REGULAR(0x100),
		LTO_SYMBOL_DEFINITION_TENTATIVE(0x200),
		LTO_SYMBOL_DEFINITION_WEAK(0x300),
		LTO_SYMBOL_DEFINITION_UNDEFINED(0x400),
		LTO_SYMBOL_DEFINITION_WEAKUNDEF(0x500),
		LTO_SYMBOL_SCOPE_MASK(0x3800),
		LTO_SYMBOL_SCOPE_INTERNAL(0x800),
		LTO_SYMBOL_SCOPE_HIDDEN(0x1000),
		LTO_SYMBOL_SCOPE_PROTECTED(0x2000),
		LTO_SYMBOL_SCOPE_DEFAULT(0x1800),
		LTO_SYMBOL_SCOPE_DEFAULT_CAN_BE_HIDDEN(0x2800);
		lto_symbol_attributes(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<lto_symbol_attributes > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<lto_symbol_attributes > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum lto_debug_model implements IntValuedEnum<lto_debug_model > {
		LTO_DEBUG_MODEL_NONE(0),
		LTO_DEBUG_MODEL_DWARF(1);
		lto_debug_model(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<lto_debug_model > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<lto_debug_model > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	public enum lto_codegen_model implements IntValuedEnum<lto_codegen_model > {
		LTO_CODEGEN_PIC_MODEL_STATIC(0),
		LTO_CODEGEN_PIC_MODEL_DYNAMIC(1),
		LTO_CODEGEN_PIC_MODEL_DYNAMIC_NO_PIC(2);
		lto_codegen_model(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<lto_codegen_model > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<lto_codegen_model > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};


	/// @constant kEDAssemblySyntaxX86Intel Intel syntax for i386 and x86_64.
	public static final int kEDAssemblySyntaxX86Intel = (int)0;
	/// @constant kEDAssemblySyntaxX86ATT AT&T syntax for i386 and x86_64.
	public static final int kEDAssemblySyntaxX86ATT = (int)1;
	public static final int kEDAssemblySyntaxARMUAL = (int)2;
	
	public enum LLVMVerifierFailureAction implements IntValuedEnum<LLVMVerifierFailureAction > {
		LLVMAbortProcessAction(0),
		LLVMPrintMessageAction(1),
		LLVMReturnStatusAction(2);
		LLVMVerifierFailureAction(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<LLVMVerifierFailureAction > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<LLVMVerifierFailureAction > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	
	/// <i>native declaration : llvm-c\lto.h</i>
	public static final int LTO_API_VERSION = (int)4;
	/// <i>native declaration : llvm-c\lto.h</i>
	public static final int LTO_H = (int)1;

	
	
	/**
	 * @typedef EDByteReaderCallback<br>
	 * Interface to memory from which instructions may be read.<br>
	 * @param data A pointer whose target should be filled in with the data returned.<br>
	 * @param address The address of the byte to be read.<br>
	 * @param arg An anonymous argument for client use.<br>
	 * @result 0 on success; -1 otherwise.<br>
	 * <i>native declaration : llvm-c\EnhancedDisassembly.h:8</i>
	 */
	public static abstract class EDByteReaderCallback extends Callback<EDByteReaderCallback > {
		public abstract int apply(Pointer<Byte > data, long address, Pointer<? > arg);
	};	
	
	/**
	 * @typedef EDRegisterReaderCallback<br>
	 * Interface to registers from which registers may be read.<br>
	 * @param value A pointer whose target should be filled in with the value of the<br>
	 * register.<br>
	 * @param regID The LLVM register identifier for the register to read.<br>
	 * @param arg An anonymous argument for client use.<br>
	 * @result 0 if the register could be read; -1 otherwise.<br>
	 * <i>native declaration : llvm-c\EnhancedDisassembly.h:18</i>
	 */
	public static abstract class EDRegisterReaderCallback extends Callback<EDRegisterReaderCallback > {
		public abstract int apply(Pointer<Long > value, int regID, Pointer<? > arg);
	};


//	public static native int LLVMInitializeNativeTarget();
	public static native LLVMLibrary.LLVMTargetDataRef LLVMCreateTargetData(Pointer<Byte > StringRep);
	public static native void LLVMAddTargetData();
	public static native Pointer<Byte > LLVMCopyStringRepOfTargetData();
	public static native ValuedEnum<LLVMLibrary.LLVMByteOrdering > LLVMByteOrder();
	public static native void LLVMPointerSize();
	public static native LLVMLibrary.LLVMTypeRef LLVMIntPtrType();
	public static native void LLVMSizeOfTypeInBits();
	public static native void LLVMStoreSizeOfType();
	public static native void LLVMABISizeOfType();
	public static native void LLVMABIAlignmentOfType();
	public static native void LLVMCallFrameAlignmentOfType();
	public static native void LLVMPreferredAlignmentOfType();
	public static native void LLVMPreferredAlignmentOfGlobal(LLVMLibrary.LLVMValueRef GlobalVar);
	public static native void LLVMElementAtOffset(LLVMLibrary.LLVMTypeRef StructTy, long Offset);
	public static native void LLVMOffsetOfElement(LLVMLibrary.LLVMTypeRef StructTy, int Element);
//	public static native void LLVMInvalidateStructLayout(LLVMLibrary.LLVMTypeRef StructTy);
	public static native void LLVMDisposeTargetData();

	/////////////////////////////////////////////////////////////////////////
	// PassRegistry
	public static native void LLVMInitializeCore(LLVMLibrary.LLVMPassRegistryRef R);
	
	public static native void LLVMInitializeTransformUtils(LLVMLibrary.LLVMPassRegistryRef R);
	public static native void LLVMInitializeScalarOpts(LLVMLibrary.LLVMPassRegistryRef R);
	public static native void LLVMInitializeInstCombine(LLVMLibrary.LLVMPassRegistryRef R);
//	public static native void LLVMInitializeIPO(LLVMLibrary.LLVMPassRegistryRef R);
	public static native void LLVMInitializeInstrumentation(LLVMLibrary.LLVMPassRegistryRef R);
//	public static native void LLVMInitializeAnalysis(LLVMLibrary.LLVMPassRegistryRef R);
	public static native void LLVMInitializeIPA(LLVMLibrary.LLVMPassRegistryRef R);
	public static native void LLVMInitializeCodeGen(LLVMLibrary.LLVMPassRegistryRef R);
	public static native void LLVMInitializeTarget(LLVMLibrary.LLVMPassRegistryRef R);
	public static native void LLVMLinkInJIT();
	public static native void LLVMLinkInInterpreter();
	
	
	/////////////////////////////////////////////////////////////////////////
	// "Generic" values (owned by LLVM, call dispose when done)	
	public static native LLVMLibrary.LLVMGenericValueRef LLVMCreateGenericValueOfInt(LLVMLibrary.LLVMTypeRef Ty, long N, int IsSigned);
	public static native LLVMLibrary.LLVMGenericValueRef LLVMCreateGenericValueOfPointer(Pointer<? > P);
	public static native LLVMLibrary.LLVMGenericValueRef LLVMCreateGenericValueOfFloat(LLVMLibrary.LLVMTypeRef Ty, double N);
	public static native int  LLVMGenericValueIntWidth(LLVMLibrary.LLVMGenericValueRef GenValRef);
	public static native long LLVMGenericValueToInt(LLVMLibrary.LLVMGenericValueRef GenVal, int IsSigned);
	public static native Pointer<? > LLVMGenericValueToPointer(LLVMLibrary.LLVMGenericValueRef GenVal);
	public static native double LLVMGenericValueToFloat(LLVMLibrary.LLVMTypeRef TyRef, LLVMLibrary.LLVMGenericValueRef GenVal);
	public static native void LLVMDisposeGenericValue(LLVMLibrary.LLVMGenericValueRef GenVal);
	
	
	/////////////////////////////////////////////////////////////////////////
	// ExecutionEngine
	public static native int LLVMCreateExecutionEngineForModule(
			Pointer<LLVMLibrary.LLVMExecutionEngineRef > OutEE, 
			LLVMLibrary.LLVMModuleRef M,
			Pointer<Pointer<Byte > > OutError);
	
	public static native int LLVMCreateInterpreterForModule(Pointer<Pointer<LLVMLibrary.LLVMExecutionEngineRef > > OutInterp, LLVMLibrary.LLVMModuleRef M, Pointer<Pointer<Byte > > OutError);
	public static native int LLVMCreateJITCompilerForModule(Pointer<Pointer<LLVMLibrary.LLVMExecutionEngineRef > > OutJIT, LLVMLibrary.LLVMModuleRef M, int OptLevel, Pointer<Pointer<Byte > > OutError);
	public static native int LLVMCreateExecutionEngine(Pointer<Pointer<LLVMLibrary.LLVMExecutionEngineRef > > OutEE, LLVMLibrary.LLVMModuleProviderRef MP, Pointer<Pointer<Byte > > OutError);
	public static native int LLVMCreateInterpreter(Pointer<Pointer<LLVMLibrary.LLVMExecutionEngineRef > > OutInterp, LLVMLibrary.LLVMModuleProviderRef MP, Pointer<Pointer<Byte > > OutError);
	public static native int LLVMCreateJITCompiler(Pointer<Pointer<LLVMLibrary.LLVMExecutionEngineRef > > OutJIT, LLVMLibrary.LLVMModuleProviderRef MP, int OptLevel, Pointer<Pointer<Byte > > OutError);
	
	public static native void LLVMDisposeExecutionEngine(LLVMLibrary.LLVMExecutionEngineRef EE);
	
	public static native void LLVMRunStaticConstructors(LLVMLibrary.LLVMExecutionEngineRef EE);
	public static native void LLVMRunStaticDestructors(LLVMLibrary.LLVMExecutionEngineRef EE);
	public static native int LLVMRunFunctionAsMain(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef F, int ArgC, Pointer<Pointer<Byte > > ArgV, Pointer<Pointer<Byte > > EnvP);
	public static native LLVMLibrary.LLVMGenericValueRef LLVMRunFunction(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef F, int NumArgs, Pointer<LLVMLibrary.LLVMGenericValueRef > Args);
	public static native void LLVMFreeMachineCodeForFunction(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef F);
	public static native void LLVMAddModule(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMModuleRef M);
	public static native void LLVMAddModuleProvider(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMModuleProviderRef MP);
	public static native int LLVMRemoveModule(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMModuleRef M, Pointer<LLVMLibrary.LLVMModuleRef > OutMod, Pointer<Pointer<Byte > > OutError);
	public static native int LLVMRemoveModuleProvider(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMModuleProviderRef MP, Pointer<LLVMLibrary.LLVMModuleRef > OutMod, Pointer<Pointer<Byte > > OutError);
	public static native int LLVMFindFunction(LLVMLibrary.LLVMExecutionEngineRef EE, Pointer<Byte > Name, Pointer<LLVMLibrary.LLVMValueRef > OutFn);
	public static native Pointer<? > LLVMRecompileAndRelinkFunction(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef Fn);
	public static native LLVMLibrary.LLVMTargetDataRef LLVMGetExecutionEngineTargetData(LLVMLibrary.LLVMExecutionEngineRef EE);
	public static native void LLVMAddGlobalMapping(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef Global, Pointer<? > Addr);
	public static native Pointer<? > LLVMGetPointerToGlobal(LLVMLibrary.LLVMExecutionEngineRef EE, LLVMLibrary.LLVMValueRef Global);


//	public static native Pointer<? > llvm_create_optimizer();
//	public static native void llvm_destroy_optimizer(Pointer<? > lto);
//	public static native ValuedEnum<LLVMLibrary.llvm_lto_status_t > llvm_read_object_file(Pointer<? > lto, Pointer<Byte > input_filename);
//	public static native ValuedEnum<LLVMLibrary.llvm_lto_status_t > llvm_optimize_modules(Pointer<? > lto, Pointer<Byte > output_filename);
	
	
	public static native void LLVMDisposeMessage(Pointer<Byte > Message);
	
	
	/////////////////////////////////////////////////////////////////////////
	// Context
	public static native LLVMLibrary.LLVMContextRef LLVMContextCreate();	
	public static native LLVMLibrary.LLVMContextRef LLVMGetGlobalContext();
	public static native void LLVMContextDispose(LLVMLibrary.LLVMContextRef C);
	
	
	
	public static native void LLVMGetMDKindIDInContext(LLVMLibrary.LLVMContextRef C, Pointer<Byte > Name, int SLen);
	public static native void LLVMGetMDKindID(Pointer<Byte > Name, int SLen);
	
	/////////////////////////////////////////////////////////////////////////
	// Module
	public static native LLVMLibrary.LLVMModuleRef LLVMModuleCreateWithName(Pointer<Byte > ModuleID);	
	public static native LLVMLibrary.LLVMModuleRef LLVMModuleCreateWithNameInContext(Pointer<Byte > ModuleID, LLVMLibrary.LLVMContextRef C);
	//public static native LLVMLibrary.LLVMModuleRef LLVMModuleCreateWithNameInContext(String ModuleID, LLVMLibrary.LLVMContextRef C);
	public static native void LLVMDisposeModule(LLVMLibrary.LLVMModuleRef M);	
	public static native Pointer<Byte > LLVMGetDataLayout(LLVMLibrary.LLVMModuleRef M);
	public static native void LLVMSetDataLayout(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Triple);
	public static native Pointer<Byte > LLVMGetTarget(LLVMLibrary.LLVMModuleRef M);
	public static native void LLVMSetTarget(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Triple);
//	public static native int LLVMAddTypeName(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Name, LLVMLibrary.LLVMTypeRef Ty);
//	public static native void LLVMDeleteTypeName(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMTypeRef LLVMGetTypeByName(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Name);
//	public static native Pointer<Byte > LLVMGetTypeName(LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty);
	public static native void LLVMDumpModule(LLVMLibrary.LLVMModuleRef M);
	public static native void LLVMSetModuleInlineAsm(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Asm);
	public static native LLVMLibrary.LLVMContextRef LLVMGetModuleContext(LLVMLibrary.LLVMModuleRef M);
	
	
	/////////////////////////////////////////////////////////////////////////
	// TypeRef
	public static native ValuedEnum<LLVMLibrary.LLVMTypeKind > LLVMGetTypeKind(LLVMLibrary.LLVMTypeRef Ty);
	public static native LLVMLibrary.LLVMContextRef LLVMGetTypeContext(LLVMLibrary.LLVMTypeRef Ty);
	public static native LLVMLibrary.LLVMTypeRef LLVMInt1TypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMInt8TypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMInt16TypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMInt32TypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMInt64TypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMIntTypeInContext(LLVMLibrary.LLVMContextRef C, int NumBits);
	public static native LLVMLibrary.LLVMTypeRef LLVMInt1Type();
	public static native LLVMLibrary.LLVMTypeRef LLVMInt8Type();
	public static native LLVMLibrary.LLVMTypeRef LLVMInt16Type();
	public static native LLVMLibrary.LLVMTypeRef LLVMInt32Type();
	public static native LLVMLibrary.LLVMTypeRef LLVMInt64Type();
	public static native LLVMLibrary.LLVMTypeRef LLVMIntType(int NumBits);
	public static native int LLVMGetIntTypeWidth(LLVMLibrary.LLVMTypeRef IntegerTy);
	public static native LLVMLibrary.LLVMTypeRef LLVMFloatTypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMDoubleTypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMX86FP80TypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMFP128TypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMPPCFP128TypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMFloatType();
	public static native LLVMLibrary.LLVMTypeRef LLVMDoubleType();
	public static native LLVMLibrary.LLVMTypeRef LLVMX86FP80Type();
	public static native LLVMLibrary.LLVMTypeRef LLVMFP128Type();
	public static native LLVMLibrary.LLVMTypeRef LLVMPPCFP128Type();
	
//	public static native LLVMLibrary.LLVMTypeRef LLVMFunctionType(
//			LLVMLibrary.LLVMTypeRef ReturnType,
//			Pointer<Pointer<LLVMLibrary.LLVMOpaqueType > > ParamTypes,
//			int ParamCount, int IsVarArg);
	
	public static native LLVMLibrary.LLVMTypeRef LLVMFunctionType(
			LLVMLibrary.LLVMTypeRef ReturnType,
			Pointer<? extends LLVMLibrary.LLVMOpaqueType > ParamTypes,
			int ParamCount, int IsVarArg);
	
	public static native int LLVMIsFunctionVarArg(LLVMLibrary.LLVMTypeRef FunctionTy);
	public static native LLVMLibrary.LLVMTypeRef LLVMGetReturnType(LLVMLibrary.LLVMTypeRef FunctionTy);
	public static native int LLVMCountParamTypes(LLVMLibrary.LLVMTypeRef FunctionTy);
	public static native void LLVMGetParamTypes(LLVMLibrary.LLVMTypeRef FunctionTy, Pointer<Pointer<LLVMLibrary.LLVMOpaqueType > > Dest);
	public static native LLVMLibrary.LLVMTypeRef LLVMStructTypeInContext(LLVMLibrary.LLVMContextRef C, Pointer<Pointer<LLVMLibrary.LLVMOpaqueType > > ElementTypes, int ElementCount, int Packed);
	public static native LLVMLibrary.LLVMTypeRef LLVMStructType(Pointer<Pointer<LLVMLibrary.LLVMOpaqueType > > ElementTypes, int ElementCount, int Packed);
	public static native int LLVMCountStructElementTypes(LLVMLibrary.LLVMTypeRef StructTy);
	public static native void LLVMGetStructElementTypes(LLVMLibrary.LLVMTypeRef StructTy, Pointer<Pointer<LLVMLibrary.LLVMOpaqueType > > Dest);
	public static native int LLVMIsPackedStruct(LLVMLibrary.LLVMTypeRef StructTy);
	public static native LLVMLibrary.LLVMTypeRef LLVMArrayType(LLVMLibrary.LLVMTypeRef ElementType, int ElementCount);
	public static native LLVMLibrary.LLVMTypeRef LLVMPointerType(LLVMLibrary.LLVMTypeRef ElementType, int AddressSpace);
	public static native LLVMLibrary.LLVMTypeRef LLVMVectorType(LLVMLibrary.LLVMTypeRef ElementType, int ElementCount);
	public static native LLVMLibrary.LLVMTypeRef LLVMGetElementType(LLVMLibrary.LLVMTypeRef Ty);
	public static native int LLVMGetArrayLength(LLVMLibrary.LLVMTypeRef ArrayTy);
	public static native int LLVMGetPointerAddressSpace(LLVMLibrary.LLVMTypeRef PointerTy);
	public static native int LLVMGetVectorSize(LLVMLibrary.LLVMTypeRef VectorTy);
	public static native LLVMLibrary.LLVMTypeRef LLVMVoidTypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMLabelTypeInContext(LLVMLibrary.LLVMContextRef C);
//	public static native LLVMLibrary.LLVMTypeRef LLVMOpaqueTypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMX86MMXTypeInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMTypeRef LLVMVoidType();
	public static native LLVMLibrary.LLVMTypeRef LLVMLabelType();
//	public static native LLVMLibrary.LLVMTypeRef LLVMOpaqueType();
	public static native LLVMLibrary.LLVMTypeRef LLVMX86MMXType();
//	public static native LLVMLibrary.LLVMTypeHandleRef LLVMCreateTypeHandle(LLVMLibrary.LLVMTypeRef PotentiallyAbstractTy);
//	public static native void LLVMRefineType(LLVMLibrary.LLVMTypeRef AbstractTy, LLVMLibrary.LLVMTypeRef ConcreteTy);
//	public static native LLVMLibrary.LLVMTypeRef LLVMResolveTypeHandle(LLVMLibrary.LLVMTypeHandleRef TypeHandle);
//	public static native void LLVMDisposeTypeHandle(LLVMLibrary.LLVMTypeHandleRef TypeHandle);
	
	
	/////////////////////////////////////////////////////////////////////////
	// ValueRef
	public static native LLVMLibrary.LLVMTypeRef LLVMTypeOf(LLVMLibrary.LLVMValueRef Val);
	public static native Pointer<Byte > LLVMGetValueName(LLVMLibrary.LLVMValueRef Val);
	public static native void LLVMSetValueName(LLVMLibrary.LLVMValueRef Val, Pointer<Byte > Name);
	public static native void LLVMDumpValue(LLVMLibrary.LLVMValueRef Val);
	public static native void LLVMReplaceAllUsesWith(LLVMLibrary.LLVMValueRef OldVal, LLVMLibrary.LLVMValueRef NewVal);
	public static native int LLVMHasMetadata(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMGetMetadata(LLVMLibrary.LLVMValueRef Val, int KindID);
	public static native void LLVMSetMetadata(LLVMLibrary.LLVMValueRef Val, int KindID, LLVMLibrary.LLVMValueRef Node);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAArgument(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsABasicBlock(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAInlineAsm(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAUser(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAConstant(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantAggregateZero(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantArray(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantExpr(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantFP(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantInt(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantPointerNull(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantStruct(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantVector(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAGlobalValue(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAFunction(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAGlobalAlias(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAGlobalVariable(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAUndefValue(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAInstruction(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsABinaryOperator(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsACallInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAIntrinsicInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsADbgInfoIntrinsic(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsADbgDeclareInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAEHSelectorInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAMemIntrinsic(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAMemCpyInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAMemMoveInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAMemSetInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsACmpInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAFCmpInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAICmpInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAExtractElementInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAGetElementPtrInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAInsertElementInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAInsertValueInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAPHINode(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsASelectInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAShuffleVectorInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAStoreInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsATerminatorInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsABranchInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAInvokeInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAReturnInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsASwitchInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAUnreachableInst(LLVMLibrary.LLVMValueRef Val);
//	public static native LLVMLibrary.LLVMValueRef LLVMIsAUnwindInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAUnaryInstruction(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAAllocaInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsACastInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsABitCastInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAFPExtInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAFPToSIInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAFPToUIInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAFPTruncInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAIntToPtrInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAPtrToIntInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsASExtInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsASIToFPInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsATruncInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAUIToFPInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAZExtInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAExtractValueInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsALoadInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMIsAVAArgInst(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMUseRef LLVMGetFirstUse(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMUseRef LLVMGetNextUse(LLVMLibrary.LLVMUseRef U);
	public static native LLVMLibrary.LLVMValueRef LLVMGetUser(LLVMLibrary.LLVMUseRef U);
	public static native LLVMLibrary.LLVMValueRef LLVMGetUsedValue(LLVMLibrary.LLVMUseRef U);
	public static native LLVMLibrary.LLVMValueRef LLVMGetOperand(LLVMLibrary.LLVMValueRef Val, int Index);
	public static native void LLVMSetOperand(LLVMLibrary.LLVMValueRef User, int Index, LLVMLibrary.LLVMValueRef Val);
	public static native int LLVMGetNumOperands(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNull(LLVMLibrary.LLVMTypeRef Ty);
	public static native LLVMLibrary.LLVMValueRef LLVMConstAllOnes(LLVMLibrary.LLVMTypeRef Ty);
	public static native LLVMLibrary.LLVMValueRef LLVMGetUndef(LLVMLibrary.LLVMTypeRef Ty);
	public static native int LLVMIsConstant(LLVMLibrary.LLVMValueRef Val);
	public static native int LLVMIsNull(LLVMLibrary.LLVMValueRef Val);
	public static native int LLVMIsUndef(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMConstPointerNull(LLVMLibrary.LLVMTypeRef Ty);
	public static native LLVMLibrary.LLVMValueRef LLVMMDStringInContext(LLVMLibrary.LLVMContextRef C, Pointer<Byte > Str, int SLen);
	public static native LLVMLibrary.LLVMValueRef LLVMMDString(Pointer<Byte > Str, int SLen);
	public static native LLVMLibrary.LLVMValueRef LLVMMDNodeInContext(LLVMLibrary.LLVMContextRef C, Pointer<LLVMLibrary.LLVMValueRef> Vals, int Count);
	public static native LLVMLibrary.LLVMValueRef LLVMMDNode(Pointer<LLVMLibrary.LLVMValueRef> Vals, int Count);
	public static native LLVMLibrary.LLVMValueRef LLVMConstInt(LLVMLibrary.LLVMTypeRef IntTy, long N, int SignExtend);
	public static native LLVMLibrary.LLVMValueRef LLVMConstIntOfArbitraryPrecision(LLVMLibrary.LLVMTypeRef IntTy, int NumWords, Pointer<Long > Words);
	public static native LLVMLibrary.LLVMValueRef LLVMConstIntOfString(LLVMLibrary.LLVMTypeRef IntTy, Pointer<Byte > Text, byte Radix);
	public static native LLVMLibrary.LLVMValueRef LLVMConstIntOfStringAndSize(LLVMLibrary.LLVMTypeRef IntTy, Pointer<Byte > Text, int SLen, byte Radix);
	public static native LLVMLibrary.LLVMValueRef LLVMConstReal(LLVMLibrary.LLVMTypeRef RealTy, double N);
	public static native LLVMLibrary.LLVMValueRef LLVMConstRealOfString(LLVMLibrary.LLVMTypeRef RealTy, Pointer<Byte > Text);
	public static native LLVMLibrary.LLVMValueRef LLVMConstRealOfStringAndSize(LLVMLibrary.LLVMTypeRef RealTy, Pointer<Byte > Text, int SLen);
	public static native long LLVMConstIntGetZExtValue(LLVMLibrary.LLVMValueRef ConstantVal);
	public static native long LLVMConstIntGetSExtValue(LLVMLibrary.LLVMValueRef ConstantVal);
	public static native LLVMLibrary.LLVMValueRef LLVMConstStringInContext(LLVMLibrary.LLVMContextRef C, Pointer<Byte > Str, int Length, int DontNullTerminate);
	public static native LLVMLibrary.LLVMValueRef LLVMConstStructInContext(LLVMLibrary.LLVMContextRef C, Pointer<LLVMLibrary.LLVMValueRef> ConstantVals, int Count, int Packed);
	public static native LLVMLibrary.LLVMValueRef LLVMConstString(Pointer<Byte > Str, int Length, int DontNullTerminate);
	public static native LLVMLibrary.LLVMValueRef LLVMConstArray(LLVMLibrary.LLVMTypeRef ElementTy, Pointer<LLVMLibrary.LLVMValueRef> ConstantVals, int Length);
	public static native LLVMLibrary.LLVMValueRef LLVMConstStruct(Pointer<LLVMLibrary.LLVMValueRef> ConstantVals, int Count, int Packed);
	public static native LLVMLibrary.LLVMValueRef LLVMConstVector(Pointer<LLVMLibrary.LLVMValueRef> ScalarConstantVals, int Size);
	public static native ValuedEnum<LLVMLibrary.LLVMOpcode > LLVMGetConstOpcode(LLVMLibrary.LLVMValueRef ConstantVal);
	public static native LLVMLibrary.LLVMValueRef LLVMAlignOf(LLVMLibrary.LLVMTypeRef Ty);
	public static native LLVMLibrary.LLVMValueRef LLVMSizeOf(LLVMLibrary.LLVMTypeRef Ty);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNeg(LLVMLibrary.LLVMValueRef ConstantVal);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNSWNeg(LLVMLibrary.LLVMValueRef ConstantVal);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNUWNeg(LLVMLibrary.LLVMValueRef ConstantVal);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFNeg(LLVMLibrary.LLVMValueRef ConstantVal);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNot(LLVMLibrary.LLVMValueRef ConstantVal);
	public static native LLVMLibrary.LLVMValueRef LLVMConstAdd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNSWAdd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNUWAdd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFAdd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstSub(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNSWSub(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNUWSub(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFSub(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstMul(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNSWMul(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstNUWMul(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFMul(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstUDiv(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstSDiv(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstExactSDiv(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFDiv(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstURem(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstSRem(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFRem(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstAnd(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstOr(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstXor(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstICmp(ValuedEnum<LLVMLibrary.LLVMIntPredicate > Predicate, LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFCmp(ValuedEnum<LLVMLibrary.LLVMRealPredicate > Predicate, LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstShl(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstLShr(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstAShr(LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstGEP(LLVMLibrary.LLVMValueRef ConstantVal, Pointer<LLVMLibrary.LLVMValueRef> ConstantIndices, int NumIndices);
	public static native LLVMLibrary.LLVMValueRef LLVMConstInBoundsGEP(LLVMLibrary.LLVMValueRef ConstantVal, Pointer<LLVMLibrary.LLVMValueRef> ConstantIndices, int NumIndices);
	public static native LLVMLibrary.LLVMValueRef LLVMConstTrunc(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstSExt(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstZExt(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFPTrunc(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFPExt(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstUIToFP(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstSIToFP(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFPToUI(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFPToSI(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstPtrToInt(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstIntToPtr(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstBitCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstZExtOrBitCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstSExtOrBitCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstTruncOrBitCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstPointerCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstIntCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType, int isSigned);
	public static native LLVMLibrary.LLVMValueRef LLVMConstFPCast(LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
	public static native LLVMLibrary.LLVMValueRef LLVMConstSelect(LLVMLibrary.LLVMValueRef ConstantCondition, LLVMLibrary.LLVMValueRef ConstantIfTrue, LLVMLibrary.LLVMValueRef ConstantIfFalse);
	public static native LLVMLibrary.LLVMValueRef LLVMConstExtractElement(LLVMLibrary.LLVMValueRef VectorConstant, LLVMLibrary.LLVMValueRef IndexConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstInsertElement(LLVMLibrary.LLVMValueRef VectorConstant, LLVMLibrary.LLVMValueRef ElementValueConstant, LLVMLibrary.LLVMValueRef IndexConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstShuffleVector(LLVMLibrary.LLVMValueRef VectorAConstant, LLVMLibrary.LLVMValueRef VectorBConstant, LLVMLibrary.LLVMValueRef MaskConstant);
	public static native LLVMLibrary.LLVMValueRef LLVMConstExtractValue(LLVMLibrary.LLVMValueRef AggConstant, Pointer<Integer > IdxList, int NumIdx);
	public static native LLVMLibrary.LLVMValueRef LLVMConstInsertValue(LLVMLibrary.LLVMValueRef AggConstant, LLVMLibrary.LLVMValueRef ElementValueConstant, Pointer<Integer > IdxList, int NumIdx);
	public static native LLVMLibrary.LLVMValueRef LLVMConstInlineAsm(LLVMLibrary.LLVMTypeRef Ty, Pointer<Byte > AsmString, Pointer<Byte > Constraints, int HasSideEffects, int IsAlignStack);
	public static native LLVMLibrary.LLVMValueRef LLVMBlockAddress(LLVMLibrary.LLVMValueRef F, LLVMLibrary.LLVMBasicBlockRef BB);
	public static native LLVMLibrary.LLVMModuleRef LLVMGetGlobalParent(LLVMLibrary.LLVMValueRef Global);
	public static native int LLVMIsDeclaration(LLVMLibrary.LLVMValueRef Global);
	public static native ValuedEnum<LLVMLibrary.LLVMLinkage > LLVMGetLinkage(LLVMLibrary.LLVMValueRef Global);
	public static native void LLVMSetLinkage(LLVMLibrary.LLVMValueRef Global, ValuedEnum<LLVMLibrary.LLVMLinkage > Linkage);
	public static native Pointer<Byte > LLVMGetSection(LLVMLibrary.LLVMValueRef Global);
	public static native void LLVMSetSection(LLVMLibrary.LLVMValueRef Global, Pointer<Byte > Section);
	public static native ValuedEnum<LLVMLibrary.LLVMVisibility > LLVMGetVisibility(LLVMLibrary.LLVMValueRef Global);
	public static native void LLVMSetVisibility(LLVMLibrary.LLVMValueRef Global, ValuedEnum<LLVMLibrary.LLVMVisibility > Viz);
	public static native void LLVMGetAlignment(LLVMLibrary.LLVMValueRef Global);
	public static native void LLVMSetAlignment(LLVMLibrary.LLVMValueRef Global, int Bytes);
	
	public static native LLVMLibrary.LLVMValueRef LLVMAddGlobal(LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, Pointer<Byte > Name);	
	public static native LLVMLibrary.LLVMValueRef LLVMAddGlobalInAddressSpace(LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, Pointer<Byte > Name, int AddressSpace);
	public static native LLVMLibrary.LLVMValueRef LLVMGetNamedGlobal(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMGetFirstGlobal(LLVMLibrary.LLVMModuleRef M);
	public static native LLVMLibrary.LLVMValueRef LLVMGetLastGlobal(LLVMLibrary.LLVMModuleRef M);
	
	public static native LLVMLibrary.LLVMValueRef LLVMGetNextGlobal(LLVMLibrary.LLVMValueRef GlobalVar);
	public static native LLVMLibrary.LLVMValueRef LLVMGetPreviousGlobal(LLVMLibrary.LLVMValueRef GlobalVar);
	
	public static native void LLVMDeleteGlobal(LLVMLibrary.LLVMValueRef GlobalVar);
	public static native LLVMLibrary.LLVMValueRef LLVMGetInitializer(LLVMLibrary.LLVMValueRef GlobalVar);
	public static native void LLVMSetInitializer(LLVMLibrary.LLVMValueRef GlobalVar, LLVMLibrary.LLVMValueRef ConstantVal);
	public static native int LLVMIsThreadLocal(LLVMLibrary.LLVMValueRef GlobalVar);
	public static native void LLVMSetThreadLocal(LLVMLibrary.LLVMValueRef GlobalVar, int IsThreadLocal);
	public static native int LLVMIsGlobalConstant(LLVMLibrary.LLVMValueRef GlobalVar);
	public static native void LLVMSetGlobalConstant(LLVMLibrary.LLVMValueRef GlobalVar, int IsConstant);
	
	public static native LLVMLibrary.LLVMValueRef LLVMAddAlias(LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Aliasee, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMAddFunction(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Name, LLVMLibrary.LLVMTypeRef FunctionTy);
	public static native LLVMLibrary.LLVMValueRef LLVMGetNamedFunction(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMGetFirstFunction(LLVMLibrary.LLVMModuleRef M);
	public static native LLVMLibrary.LLVMValueRef LLVMGetLastFunction(LLVMLibrary.LLVMModuleRef M);
	
	public static native LLVMLibrary.LLVMValueRef LLVMGetNextFunction(LLVMLibrary.LLVMValueRef Fn);
	public static native LLVMLibrary.LLVMValueRef LLVMGetPreviousFunction(LLVMLibrary.LLVMValueRef Fn);
	
	public static native void LLVMDeleteFunction(LLVMLibrary.LLVMValueRef Fn);
	public static native void LLVMGetIntrinsicID(LLVMLibrary.LLVMValueRef Fn);
	public static native void LLVMGetFunctionCallConv(LLVMLibrary.LLVMValueRef Fn);
	public static native void LLVMSetFunctionCallConv(LLVMLibrary.LLVMValueRef Fn, int CC);
	public static native Pointer<Byte > LLVMGetGC(LLVMLibrary.LLVMValueRef Fn);
	public static native void LLVMSetGC(LLVMLibrary.LLVMValueRef Fn, Pointer<Byte > Name);
	public static native void LLVMAddFunctionAttr(LLVMLibrary.LLVMValueRef Fn, ValuedEnum<LLVMLibrary.LLVMAttribute > PA);
	public static native ValuedEnum<LLVMLibrary.LLVMAttribute > LLVMGetFunctionAttr(LLVMLibrary.LLVMValueRef Fn);
	public static native void LLVMRemoveFunctionAttr(LLVMLibrary.LLVMValueRef Fn, ValuedEnum<LLVMLibrary.LLVMAttribute > PA);
	public static native int  LLVMCountParams(LLVMLibrary.LLVMValueRef Fn);
	public static native void LLVMGetParams(LLVMLibrary.LLVMValueRef Fn, Pointer<LLVMLibrary.LLVMValueRef> Params);
	public static native LLVMLibrary.LLVMValueRef LLVMGetParam(LLVMLibrary.LLVMValueRef Fn, int Index);
	public static native LLVMLibrary.LLVMValueRef LLVMGetParamParent(LLVMLibrary.LLVMValueRef Inst);
	public static native LLVMLibrary.LLVMValueRef LLVMGetFirstParam(LLVMLibrary.LLVMValueRef Fn);
	public static native LLVMLibrary.LLVMValueRef LLVMGetLastParam(LLVMLibrary.LLVMValueRef Fn);
	public static native LLVMLibrary.LLVMValueRef LLVMGetNextParam(LLVMLibrary.LLVMValueRef Arg);
	public static native LLVMLibrary.LLVMValueRef LLVMGetPreviousParam(LLVMLibrary.LLVMValueRef Arg);
	public static native void LLVMAddAttribute(LLVMLibrary.LLVMValueRef Arg, ValuedEnum<LLVMLibrary.LLVMAttribute > PA);
	public static native void LLVMRemoveAttribute(LLVMLibrary.LLVMValueRef Arg, ValuedEnum<LLVMLibrary.LLVMAttribute > PA);
	public static native ValuedEnum<LLVMLibrary.LLVMAttribute > LLVMGetAttribute(LLVMLibrary.LLVMValueRef Arg);
	public static native void LLVMSetParamAlignment(LLVMLibrary.LLVMValueRef Arg, int align);
	
	public static native LLVMLibrary.LLVMValueRef LLVMBasicBlockAsValue(LLVMLibrary.LLVMBasicBlockRef BB);
	public static native int LLVMValueIsBasicBlock(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMValueAsBasicBlock(LLVMLibrary.LLVMValueRef Val);
	public static native LLVMLibrary.LLVMValueRef LLVMGetBasicBlockParent(LLVMLibrary.LLVMBasicBlockRef BB);
	public static native int  LLVMCountBasicBlocks(LLVMLibrary.LLVMValueRef Fn);
	public static native void LLVMGetBasicBlocks(LLVMLibrary.LLVMValueRef Fn, Pointer<LLVMLibrary.LLVMBasicBlockRef > BasicBlocks);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetFirstBasicBlock(LLVMLibrary.LLVMValueRef Fn);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetLastBasicBlock(LLVMLibrary.LLVMValueRef Fn);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetNextBasicBlock(LLVMLibrary.LLVMBasicBlockRef BB);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetPreviousBasicBlock(LLVMLibrary.LLVMBasicBlockRef BB);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetEntryBasicBlock(LLVMLibrary.LLVMValueRef Fn);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMAppendBasicBlockInContext(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMValueRef Fn, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMInsertBasicBlockInContext(LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMBasicBlockRef BB, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMAppendBasicBlock(LLVMLibrary.LLVMValueRef Fn, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMInsertBasicBlock(LLVMLibrary.LLVMBasicBlockRef InsertBeforeBB, Pointer<Byte > Name);
	public static native void LLVMDeleteBasicBlock(LLVMLibrary.LLVMBasicBlockRef BB);
	public static native void LLVMMoveBasicBlockBefore(LLVMLibrary.LLVMBasicBlockRef BB, LLVMLibrary.LLVMBasicBlockRef MovePos);
	public static native void LLVMMoveBasicBlockAfter(LLVMLibrary.LLVMBasicBlockRef BB, LLVMLibrary.LLVMBasicBlockRef MovePos);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetInstructionParent(LLVMLibrary.LLVMValueRef Inst);
	public static native LLVMLibrary.LLVMValueRef LLVMGetFirstInstruction(LLVMLibrary.LLVMBasicBlockRef BB);
	public static native LLVMLibrary.LLVMValueRef LLVMGetLastInstruction(LLVMLibrary.LLVMBasicBlockRef BB);
	public static native LLVMLibrary.LLVMValueRef LLVMGetNextInstruction(LLVMLibrary.LLVMValueRef Inst);
	public static native LLVMLibrary.LLVMValueRef LLVMGetPreviousInstruction(LLVMLibrary.LLVMValueRef Inst);
	public static native void LLVMSetInstructionCallConv(LLVMLibrary.LLVMValueRef Instr, int CC);
	public static native int  LLVMGetInstructionCallConv(LLVMLibrary.LLVMValueRef Instr);
	public static native void LLVMAddInstrAttribute(LLVMLibrary.LLVMValueRef Instr, int index, ValuedEnum<LLVMLibrary.LLVMAttribute > LLVMAttribute1);
	public static native void LLVMRemoveInstrAttribute(LLVMLibrary.LLVMValueRef Instr, int index, ValuedEnum<LLVMLibrary.LLVMAttribute > LLVMAttribute1);
	public static native void LLVMSetInstrParamAlignment(LLVMLibrary.LLVMValueRef Instr, int index, int align);
	public static native int  LLVMIsTailCall(LLVMLibrary.LLVMValueRef CallInst);
	public static native void LLVMSetTailCall(LLVMLibrary.LLVMValueRef CallInst, int IsTailCall);
	public static native void LLVMAddIncoming(LLVMLibrary.LLVMValueRef PhiNode, Pointer<LLVMLibrary.LLVMValueRef> IncomingValues, Pointer<LLVMLibrary.LLVMBasicBlockRef > IncomingBlocks, int Count);
	public static native int  LLVMCountIncoming(LLVMLibrary.LLVMValueRef PhiNode);
	public static native LLVMLibrary.LLVMValueRef LLVMGetIncomingValue(LLVMLibrary.LLVMValueRef PhiNode, int Index);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetIncomingBlock(LLVMLibrary.LLVMValueRef PhiNode, int Index);
	
	
	/////////////////////////////////////////////////////////////////////////
	// Instruction Builder
	public static native LLVMLibrary.LLVMBuilderRef LLVMCreateBuilderInContext(LLVMLibrary.LLVMContextRef C);
	public static native LLVMLibrary.LLVMBuilderRef LLVMCreateBuilder();
	public static native void LLVMPositionBuilder(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMBasicBlockRef Block, LLVMLibrary.LLVMValueRef Instr);
	public static native void LLVMPositionBuilderBefore(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr);
	public static native void LLVMPositionBuilderAtEnd(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMBasicBlockRef Block);
	public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetInsertBlock(LLVMLibrary.LLVMBuilderRef Builder);
	public static native void LLVMClearInsertionPosition(LLVMLibrary.LLVMBuilderRef Builder);
	public static native void LLVMInsertIntoBuilder(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr);
	public static native void LLVMInsertIntoBuilderWithName(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr, Pointer<Byte > Name);
	public static native void LLVMDisposeBuilder(LLVMLibrary.LLVMBuilderRef Builder);
	public static native void LLVMSetCurrentDebugLocation(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef L);
	public static native LLVMLibrary.LLVMValueRef LLVMGetCurrentDebugLocation(LLVMLibrary.LLVMBuilderRef Builder);
	public static native void LLVMSetInstDebugLocation(LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Inst);

	public static native LLVMLibrary.LLVMValueRef LLVMBuildRetVoid(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildRet(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildAggregateRet(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, Pointer<LLVMLibrary.LLVMValueRef> RetVals, int N);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildBr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMBasicBlockRef Dest);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildCondBr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef If, LLVMLibrary.LLVMBasicBlockRef Then, LLVMLibrary.LLVMBasicBlockRef Else);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildSwitch(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V, LLVMLibrary.LLVMBasicBlockRef Else, int NumCases);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildIndirectBr(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Addr, int NumDests);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildInvoke(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Fn, Pointer<LLVMLibrary.LLVMValueRef> Args, int NumArgs, LLVMLibrary.LLVMBasicBlockRef Then, LLVMLibrary.LLVMBasicBlockRef Catch, Pointer<Byte > Name);
//	public static native LLVMLibrary.LLVMValueRef LLVMBuildUnwind(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildUnreachable(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1);
	public static native void                     LLVMAddCase(LLVMLibrary.LLVMValueRef Switch, LLVMLibrary.LLVMValueRef OnVal, LLVMLibrary.LLVMBasicBlockRef Dest);
	public static native void                     LLVMAddDestination(LLVMLibrary.LLVMValueRef IndirectBr, LLVMLibrary.LLVMBasicBlockRef Dest);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildAdd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWAdd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWAdd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFAdd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildSub(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWSub(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWSub(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFSub(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildMul(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWMul(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWMul(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFMul(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildUDiv(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildSDiv(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildExactSDiv(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFDiv(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildURem(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildSRem(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFRem(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildShl(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildLShr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildAShr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildAnd(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildOr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildXor(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildBinOp(LLVMLibrary.LLVMBuilderRef B, ValuedEnum<LLVMLibrary.LLVMOpcode > Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNeg(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWNeg(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef V, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWNeg(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef V, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFNeg(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildNot(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildMalloc(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildArrayMalloc(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Val, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildAlloca(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildArrayAlloca(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Val, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFree(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef PointerVal);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildLoad(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef PointerVal, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildStore(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMValueRef Ptr);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildGEP(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Pointer, Pointer<LLVMLibrary.LLVMValueRef> Indices, int NumIndices, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildInBoundsGEP(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Pointer, Pointer<LLVMLibrary.LLVMValueRef> Indices, int NumIndices, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildStructGEP(LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Pointer, int Idx, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildGlobalString(LLVMLibrary.LLVMBuilderRef B, Pointer<Byte > Str, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildGlobalStringPtr(LLVMLibrary.LLVMBuilderRef B, Pointer<Byte > Str, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildTrunc(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildZExt(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildSExt(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFPToUI(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFPToSI(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildUIToFP(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildSIToFP(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFPTrunc(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFPExt(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildPtrToInt(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildIntToPtr(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildBitCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildZExtOrBitCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildSExtOrBitCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildTruncOrBitCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildCast(LLVMLibrary.LLVMBuilderRef B, ValuedEnum<LLVMLibrary.LLVMOpcode > Op, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildPointerCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildIntCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFPCast(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildICmp(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, ValuedEnum<LLVMLibrary.LLVMIntPredicate > Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildFCmp(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, ValuedEnum<LLVMLibrary.LLVMRealPredicate > Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildPhi(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMTypeRef Ty, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildCall(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Fn, Pointer<LLVMLibrary.LLVMValueRef> Args, int NumArgs, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildSelect(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef If, LLVMLibrary.LLVMValueRef Then, LLVMLibrary.LLVMValueRef Else, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildVAArg(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef List, LLVMLibrary.LLVMTypeRef Ty, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildExtractElement(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef VecVal, LLVMLibrary.LLVMValueRef Index, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildInsertElement(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef VecVal, LLVMLibrary.LLVMValueRef EltVal, LLVMLibrary.LLVMValueRef Index, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildShuffleVector(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef V1, LLVMLibrary.LLVMValueRef V2, LLVMLibrary.LLVMValueRef Mask, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildExtractValue(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef AggVal, int Index, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildInsertValue(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef AggVal, LLVMLibrary.LLVMValueRef EltVal, int Index, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildIsNull(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildIsNotNull(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef Val, Pointer<Byte > Name);
	public static native LLVMLibrary.LLVMValueRef LLVMBuildPtrDiff(LLVMLibrary.LLVMBuilderRef LLVMBuilderRef1, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer<Byte > Name);

	
	
	public static native LLVMLibrary.LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule(LLVMLibrary.LLVMModuleRef M);
	public static native void LLVMDisposeModuleProvider(LLVMLibrary.LLVMModuleProviderRef M);
	public static native int LLVMCreateMemoryBufferWithContentsOfFile(Pointer<Byte > Path, Pointer<Pointer<LLVMLibrary.LLVMOpaqueMemoryBuffer > > OutMemBuf, Pointer<Pointer<Byte > > OutMessage);
	public static native int LLVMCreateMemoryBufferWithSTDIN(Pointer<Pointer<LLVMLibrary.LLVMOpaqueMemoryBuffer > > OutMemBuf, Pointer<Pointer<Byte > > OutMessage);
	public static native void LLVMDisposeMemoryBuffer(LLVMLibrary.LLVMMemoryBufferRef MemBuf);

	
	
	public static native LLVMLibrary.LLVMPassRegistryRef LLVMGetGlobalPassRegistry();

	/////////////////////////////////////////////////////////////////////////
	// PassManager
	public static native LLVMLibrary.LLVMPassManagerRef LLVMCreatePassManager();
	public static native LLVMLibrary.LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule(LLVMLibrary.LLVMModuleRef M);
	public static native LLVMLibrary.LLVMPassManagerRef LLVMCreateFunctionPassManager(LLVMLibrary.LLVMModuleProviderRef MP);
	public static native int LLVMRunPassManager(LLVMLibrary.LLVMPassManagerRef PM, LLVMLibrary.LLVMModuleRef M);
	public static native int LLVMInitializeFunctionPassManager(LLVMLibrary.LLVMPassManagerRef FPM);
	public static native int LLVMRunFunctionPassManager(LLVMLibrary.LLVMPassManagerRef FPM, LLVMLibrary.LLVMValueRef F);
	public static native int LLVMFinalizeFunctionPassManager(LLVMLibrary.LLVMPassManagerRef FPM);
	public static native void LLVMDisposePassManager(LLVMLibrary.LLVMPassManagerRef PM);

	/////////////////////////////////////////////////////////////////////////
	// lto
//	public static native Pointer<Byte > lto_get_version();
//	public static native Pointer<Byte > lto_get_error_message();
//	public static native boolean lto_module_is_object_file(Pointer<Byte > path);
//	public static native boolean lto_module_is_object_file_for_target(Pointer<Byte > path, Pointer<Byte > target_triple_prefix);
//	public static native boolean lto_module_is_object_file_in_memory(Pointer<? > mem, @Ptr long length);
//	public static native boolean lto_module_is_object_file_in_memory_for_target(Pointer<? > mem, @Ptr long length, Pointer<Byte > target_triple_prefix);
//	public static native LLVMLibrary.lto_module_t lto_module_create(Pointer<Byte > path);
//	public static native LLVMLibrary.lto_module_t lto_module_create_from_memory(Pointer<? > mem, @Ptr long length);
//	public static native LLVMLibrary.lto_module_t lto_module_create_from_fd(int fd, Pointer<Byte > path, @CLong long size);
//	public static native void lto_module_dispose(LLVMLibrary.lto_module_t mod);
//	public static native Pointer<Byte > lto_module_get_target_triple(LLVMLibrary.lto_module_t mod);
//	public static native void lto_module_set_target_triple(LLVMLibrary.lto_module_t mod, Pointer<Byte > triple);
//	public static native int lto_module_get_num_symbols(LLVMLibrary.lto_module_t mod);
//	public static native Pointer<Byte > lto_module_get_symbol_name(LLVMLibrary.lto_module_t mod, int index);
//	public static native ValuedEnum<LLVMLibrary.lto_symbol_attributes > lto_module_get_symbol_attribute(LLVMLibrary.lto_module_t mod, int index);
//	public static native LLVMLibrary.lto_code_gen_t lto_codegen_create();
//	public static native void lto_codegen_dispose(LLVMLibrary.lto_code_gen_t lto_code_gen_t1);
//	public static native boolean lto_codegen_add_module(LLVMLibrary.lto_code_gen_t cg, LLVMLibrary.lto_module_t mod);
//	public static native boolean lto_codegen_set_debug_model(LLVMLibrary.lto_code_gen_t cg, ValuedEnum<LLVMLibrary.lto_debug_model > lto_debug_model1);
//	public static native boolean lto_codegen_set_pic_model(LLVMLibrary.lto_code_gen_t cg, ValuedEnum<LLVMLibrary.lto_codegen_model > lto_codegen_model1);
//	public static native void lto_codegen_set_cpu(LLVMLibrary.lto_code_gen_t cg, Pointer<Byte > cpu);
//	public static native void lto_codegen_set_assembler_path(LLVMLibrary.lto_code_gen_t cg, Pointer<Byte > path);
//	public static native void lto_codegen_set_assembler_args(LLVMLibrary.lto_code_gen_t cg, Pointer<Pointer<Byte > > args, int nargs);
//	public static native void lto_codegen_add_must_preserve_symbol(LLVMLibrary.lto_code_gen_t cg, Pointer<Byte > symbol);
//	public static native boolean lto_codegen_write_merged_modules(LLVMLibrary.lto_code_gen_t cg, Pointer<Byte > path);
//	public static native Pointer<? > lto_codegen_compile(LLVMLibrary.lto_code_gen_t cg, Pointer<SizeT > length);
//	public static native void lto_codegen_debug_options(LLVMLibrary.lto_code_gen_t cg, Pointer<Byte > charPtr1);

	/////////////////////////////////////////////////////////////////////////
	// Disassembler
//	public static native int EDGetDisassembler(Pointer<Pointer<? > > disassembler, Pointer<Byte > triple, int syntax);
//	public static native int EDGetRegisterName(Pointer<Pointer<Byte > > regName, Pointer<? > disassembler, LLVMLibrary.regID regID1);
//	public static native int EDRegisterIsStackPointer(Pointer<? > disassembler, LLVMLibrary.regID regID1);
//	public static native int EDRegisterIsProgramCounter(Pointer<? > disassembler, LLVMLibrary.regID regID1);
//	public static native int EDCreateInsts(Pointer<Pointer<? > > insts, int count, Pointer<? > disassembler, Pointer<LLVMLibrary.EDByteReaderCallback > byteReader, long address, Pointer<? > arg);
//	public static native void EDReleaseInst(Pointer<? > inst);
//	public static native int EDInstByteSize(Pointer<? > inst);
//	public static native int EDGetInstString(Pointer<Pointer<Byte > > buf, Pointer<? > inst);
//	public static native int EDInstID(Pointer<Integer > instID, Pointer<? > inst);
//	public static native int EDInstIsBranch(Pointer<? > inst);
//	public static native int EDInstIsMove(Pointer<? > inst);
//	public static native int EDBranchTargetID(Pointer<? > inst);
//	public static native int EDMoveSourceID(Pointer<? > inst);
//	public static native int EDMoveTargetID(Pointer<? > inst);
//	public static native int EDNumTokens(Pointer<? > inst);
//	public static native int EDGetToken(Pointer<Pointer<? > > token, Pointer<? > inst, int index);
//	public static native int EDGetTokenString(Pointer<Pointer<Byte > > buf, Pointer<? > token);
//	public static native int EDOperandIndexForToken(Pointer<? > token);
//	public static native int EDTokenIsWhitespace(Pointer<? > token);
//	public static native int EDTokenIsPunctuation(Pointer<? > token);
//	public static native int EDTokenIsOpcode(Pointer<? > token);
//	public static native int EDTokenIsLiteral(Pointer<? > token);
//	public static native int EDTokenIsRegister(Pointer<? > token);
//	public static native int EDTokenIsNegativeLiteral(Pointer<? > token);
//	public static native int EDLiteralTokenAbsoluteValue(Pointer<Long > value, Pointer<? > token);
//	public static native int EDRegisterTokenValue(Pointer<Integer > registerID, Pointer<? > token);
//	public static native int EDNumOperands(Pointer<? > inst);
//	public static native int EDGetOperand(Pointer<Pointer<? > > operand, Pointer<? > inst, int index);
//	public static native int EDOperandIsRegister(Pointer<? > operand);
//	public static native int EDOperandIsImmediate(Pointer<? > operand);
//	public static native int EDOperandIsMemory(Pointer<? > operand);
//	public static native int EDRegisterOperandValue(Pointer<Integer > value, Pointer<? > operand);
//	public static native int EDImmediateOperandValue(Pointer<Long > value, Pointer<? > operand);
//	public static native int EDEvaluateOperand(Pointer<Long > result, Pointer<? > operand, Pointer<LLVMLibrary.EDRegisterReaderCallback > regReader, Pointer<? > arg);

	/////////////////////////////////////////////////////////////////////////
	// BitcodeReader
	public static native int LLVMParseBitcode(LLVMLibrary.LLVMMemoryBufferRef MemBuf, Pointer<Pointer<LLVMLibrary.LLVMOpaqueModule > > OutModule, Pointer<Pointer<Byte > > OutMessage);
	public static native int LLVMParseBitcodeInContext(LLVMLibrary.LLVMContextRef ContextRef, LLVMLibrary.LLVMMemoryBufferRef MemBuf, Pointer<Pointer<LLVMLibrary.LLVMOpaqueModule > > OutModule, Pointer<Pointer<Byte > > OutMessage);
	public static native int LLVMGetBitcodeModuleInContext(LLVMLibrary.LLVMContextRef ContextRef, LLVMLibrary.LLVMMemoryBufferRef MemBuf, Pointer<Pointer<LLVMLibrary.LLVMOpaqueModule > > OutM, Pointer<Pointer<Byte > > OutMessage);
	public static native int LLVMGetBitcodeModule(LLVMLibrary.LLVMMemoryBufferRef MemBuf, Pointer<Pointer<LLVMLibrary.LLVMOpaqueModule > > OutM, Pointer<Pointer<Byte > > OutMessage);
	public static native int LLVMGetBitcodeModuleProviderInContext(LLVMLibrary.LLVMContextRef ContextRef, LLVMLibrary.LLVMMemoryBufferRef MemBuf, Pointer<Pointer<LLVMLibrary.LLVMOpaqueModuleProvider > > OutMP, Pointer<Pointer<Byte > > OutMessage);
	public static native int LLVMGetBitcodeModuleProvider(LLVMLibrary.LLVMMemoryBufferRef MemBuf, Pointer<Pointer<LLVMLibrary.LLVMOpaqueModuleProvider > > OutMP, Pointer<Pointer<Byte > > OutMessage);
	
	/////////////////////////////////////////////////////////////////////////
	// BitcodeWriter
	public static native int LLVMWriteBitcodeToFile(LLVMLibrary.LLVMModuleRef M, Pointer<Byte > Path);
	public static native int LLVMWriteBitcodeToFD(LLVMLibrary.LLVMModuleRef M, int FD, int ShouldClose, int Unbuffered);
	public static native int LLVMWriteBitcodeToFileHandle(LLVMLibrary.LLVMModuleRef M, int Handle);
	
	/////////////////////////////////////////////////////////////////////////
	// 
	public static native int LLVMVerifyModule(LLVMLibrary.LLVMModuleRef M, ValuedEnum<LLVMLibrary.LLVMVerifierFailureAction > Action, Pointer<Pointer<Byte > > OutMessage);
	public static native int LLVMVerifyFunction(LLVMLibrary.LLVMValueRef Fn, ValuedEnum<LLVMLibrary.LLVMVerifierFailureAction > Action);
	public static native void LLVMViewFunctionCFG(LLVMLibrary.LLVMValueRef Fn);
	public static native void LLVMViewFunctionCFGOnly(LLVMLibrary.LLVMValueRef Fn);

	///////////////////////////////////////////////////////////////////
	// FPM
	public static native void LLVMAddArgumentPromotionPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddConstantMergePass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddDeadArgEliminationPass(LLVMLibrary.LLVMPassManagerRef PM);
//	public static native void LLVMAddDeadTypeEliminationPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddFunctionAttrsPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddFunctionInliningPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddGlobalDCEPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddGlobalOptimizerPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddIPConstantPropagationPass(LLVMLibrary.LLVMPassManagerRef PM);
//	public static native void LLVMAddLowerSetJmpPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddPruneEHPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddIPSCCPPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddInternalizePass(int AllButMain);
//	public static native void LLVMAddRaiseAllocationsPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddStripDeadPrototypesPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddStripSymbolsPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddAggressiveDCEPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddCFGSimplificationPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddDeadStoreEliminationPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddGVNPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddIndVarSimplifyPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddInstructionCombiningPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddJumpThreadingPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddLICMPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddLoopDeletionPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddLoopRotatePass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddLoopUnrollPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddLoopUnswitchPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddMemCpyOptPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddPromoteMemoryToRegisterPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddReassociatePass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddSCCPPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddScalarReplAggregatesPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddScalarReplAggregatesPassWithThreshold(LLVMLibrary.LLVMPassManagerRef PM, int Threshold);
	public static native void LLVMAddSimplifyLibCallsPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddTailCallEliminationPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddConstantPropagationPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddDemoteMemoryToRegisterPass(LLVMLibrary.LLVMPassManagerRef PM);
	public static native void LLVMAddVerifierPass(LLVMLibrary.LLVMPassManagerRef PM);

	
	/// Undefined types
	public static interface LLVMOpaqueType { };
	public static interface LLVMOpaqueGenericValue { };
	public static interface LLVMOpaqueContext { };	
//	//public static interface LLVMOpaqueExecutionEngine {};
	public static interface LLVMOpaqueUse { };
	public static interface LLVMOpaqueModuleProvider { };
//	public static interface LLVMOpaquePassManager {	};
	public static interface LLVMOpaqueMemoryBuffer { };
	public static interface LLVMOpaquePassRegistry { };
	public static interface LLVMOpaqueModule { };
	public static interface LLVMOpaqueTypeHandle { };
	public static interface LTOModule { };
	public static interface LTOCodeGenerator { };
	public static interface regID { };
	public static interface LLVMOpaqueTargetData { };
	public static interface LLVMOpaqueValue { };
	public static interface LLVMOpaqueBuilder { };
	//public static interface LLVMOpaqueBasicBlock {};
	
	

	public static class LLVMPassManagerRef extends TypedPointer {
		public LLVMPassManagerRef(long address) { super(address); }
		public LLVMPassManagerRef(Pointer address) { super(address); }
	};

	public static class LLVMPassRegistryRef extends TypedPointer {
		public LLVMPassRegistryRef(long address) { super(address); }
		public LLVMPassRegistryRef(Pointer address) { super(address); }
	};

	public static class lto_module_t extends TypedPointer {
		public lto_module_t(long address) { super(address); }
		public lto_module_t(Pointer address) { super(address); }
	};
	
	public static class lto_code_gen_t extends TypedPointer {
		public lto_code_gen_t(long address) { super(address); }
		public lto_code_gen_t(Pointer address) { super(address); }
	};


	public static class LLVMTargetDataRef extends TypedPointer {
		public LLVMTargetDataRef(long address) { super(address); }
		public LLVMTargetDataRef(Pointer address) { super(address); }
	};

	public static class LLVMExecutionEngineRef extends TypedPointer {
		public LLVMExecutionEngineRef(long address) { super(address); }
		public LLVMExecutionEngineRef(Pointer address) { super(address); }
	};

	public static class LLVMModuleRef extends TypedPointer {
		public LLVMModuleRef(long address) { super(address); }
		public LLVMModuleRef(Pointer address) { super(address); }
	};

	public static class LLVMModuleProviderRef extends TypedPointer {
		public LLVMModuleProviderRef(long address) { super(address); }
		public LLVMModuleProviderRef(Pointer address) { super(address); }
	};

	public static class LLVMContextRef extends TypedPointer {
		public LLVMContextRef(long address) { super(address); }
		public LLVMContextRef(Pointer address) { super(address); }
	};

	public static class LLVMBuilderRef extends TypedPointer {
		public LLVMBuilderRef(long address) { super(address); }
		public LLVMBuilderRef(Pointer address) { super(address); }
	};

	public static class LLVMTypeHandleRef extends TypedPointer {
		public LLVMTypeHandleRef(long address) { super(address); }
		public LLVMTypeHandleRef(Pointer address) { super(address); }
	};

	public static class LLVMTypeRef extends TypedPointer implements LLVMOpaqueType {
		public LLVMTypeRef(long address) { super(address); }
		public LLVMTypeRef(Pointer address) { super(address); }
	};
	
	public static class LLVMValueRef extends TypedPointer implements LLVMOpaqueValue {
		public LLVMValueRef(long address) { super(address); }
		public LLVMValueRef(Pointer address) { super(address); }
	};

	public static class LLVMGenericValueRef  extends TypedPointer implements LLVMOpaqueGenericValue {
		public LLVMGenericValueRef(long address) { super(address); }
		public LLVMGenericValueRef(Pointer address) { super(address); }
	};

	public static class LLVMBasicBlockRef extends TypedPointer {
		public LLVMBasicBlockRef(long address) { super(address); }
		public LLVMBasicBlockRef(Pointer address) { super(address); }
	};

	public static class LLVMUseRef extends TypedPointer {
		public LLVMUseRef(long address) { super(address); }
		public LLVMUseRef(Pointer address) { super(address); }
	};

	public static class LLVMMemoryBufferRef extends TypedPointer {
		public LLVMMemoryBufferRef(long address) { super(address); }
		public LLVMMemoryBufferRef(Pointer address) { super(address); }
	};

}
